/**
 * Utilit√°rios para gerenciamento de administradores
 * ‚ö†Ô∏è ATEN√á√ÉO: Estas fun√ß√µes s√£o apenas para refer√™ncia.
 * Use o CLI admin (npm run admin) para gerenciar administradores,
 * pois requer privil√©gios de servidor para definir custom claims.
 */

import { auth } from '../lib/firebase';

/**
 * ‚ö†Ô∏è N√ÉO FUNCIONA NO CLIENTE - Use apenas o CLI admin
 * Esta fun√ß√£o √© apenas para refer√™ncia. Use: npm run admin promote-admin <uid>
 */
export async function promoteToAdmin(uid: string) {
  console.warn('‚ö†Ô∏è Esta fun√ß√£o n√£o funciona no cliente. Use o comando:');
  console.log(`npm run admin promote-admin ${uid}`);
  throw new Error('Use o CLI admin para promover usu√°rios');
}

/**
 * ‚ö†Ô∏è N√ÉO FUNCIONA NO CLIENTE - Use apenas o CLI admin
 * Esta fun√ß√£o √© apenas para refer√™ncia. Use: npm run admin demote-admin <uid>
 */
export async function demoteAdmin(uid: string) {
  console.warn('‚ö†Ô∏è Esta fun√ß√£o n√£o funciona no cliente. Use o comando:');
  console.log(`npm run admin demote-admin ${uid}`);
  throw new Error('Use o CLI admin para remover privil√©gios');
}

/**
 * Verifica se o usu√°rio atual √© administrador via custom claims
 */
export async function checkAdminStatus(): Promise<boolean> {
  try {
    const currentUser = auth.currentUser;
    if (!currentUser) {
      console.log('‚ùå Nenhum usu√°rio logado');
      return false;
    }

    // For√ßar refresh do token para obter claims atualizadas
    await currentUser.getIdTokenResult(true);
    const idTokenResult = await currentUser.getIdTokenResult();

    const isAdmin = idTokenResult.claims.admin === true;
    console.log(`üë§ Status do usu√°rio atual:`, isAdmin ? 'Administrador' : 'Usu√°rio comum');
    return isAdmin;
  } catch (error) {
    console.error('‚ùå Erro ao verificar status:', error);
    return false;
  }
}

/**
 * Verifica se um usu√°rio espec√≠fico √© administrador (requer privil√©gios de admin)
 * ‚ö†Ô∏è Esta fun√ß√£o requer que o usu√°rio atual seja admin
 */
export async function checkUserAdminStatus(uid: string): Promise<boolean> {
  console.warn('‚ö†Ô∏è Esta fun√ß√£o requer privil√©gios de servidor. Use o comando:');
  console.log(`npm run admin get-user ${uid}`);
  throw new Error('Use o CLI admin para verificar status de outros usu√°rios');
}

// Comandos atualizados para usar no console do navegador:
//
// 1. Verificar se voc√™ √© admin:
//    import('./lib/admin-utils').then(m => m.checkAdminStatus())
//
// Para gerenciar outros usu√°rios, use o CLI admin:
//    npm run admin promote-admin <uid>
//    npm run admin demote-admin <uid>
//    npm run admin get-user <uid>